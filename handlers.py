from aiogram import Router, Dispatcher
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from config import SUPPORT_CONTACT, ADMIN_CHAT_ID
from utils import calculate_price
from keyboards import main_menu, buy_menu, payment_menu, admin_menu

STAR_COST = 1.90  # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–≤–µ–∑–¥—ã
MIN_STARS = 50    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏

router = Router()
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command(commands=["start"]))
async def start_handler(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    """
    await message.answer_photo(
        photo=FSInputFile("images/menu.jpg"),
        caption=(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *Telegram Stars Bot*! ‚≠ê\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã –¥–ª—è —Å–µ–±—è –∏–ª–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ. üëá"
        ),
        reply_markup=main_menu
    )

# –ö—É–ø–∏—Ç—å –≤ –ø–æ–¥–∞—Ä–æ–∫
@router.message(lambda message: message.text == "–ö—É–ø–∏—Ç—å –≤ –ø–æ–¥–∞—Ä–æ–∫")
async def buy_gift_handler(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –≤ –ø–æ–¥–∞—Ä–æ–∫".
    """
    user_data[message.from_user.id] = {"gift": True, "awaiting_username": True}
    await message.answer("üéÅ –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–≤—ë–∑–¥ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞
@router.message(lambda message: user_data.get(message.from_user.id, {}).get("awaiting_username"))
async def input_gift_username_handler(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
    """
    username = message.text.strip()
    if not username.startswith("@"):
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user_data[message.from_user.id]["recipient"] = username
    user_data[message.from_user.id]["awaiting_username"] = False
    user_data[message.from_user.id]["awaiting_amount"] = True

    await message.answer(
        f"üéÅ –û—Ç–ª–∏—á–Ω–æ! –í—ã –¥–∞—Ä–∏—Ç–µ –∑–≤—ë–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å (–Ω–µ –º–µ–Ω–µ–µ {MIN_STARS}):"
    )

# –ö—É–ø–∏—Ç—å –¥–ª—è —Å–µ–±—è
@router.message(lambda message: message.text == "–ö—É–ø–∏—Ç—å –¥–ª—è —Å–µ–±—è")
async def buy_self_handler(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –¥–ª—è —Å–µ–±—è".
    """
    user_data[message.from_user.id] = {"gift": False, "awaiting_amount": True}
    await message.answer(
        f"‚ú® –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ (–Ω–µ –º–µ–Ω–µ–µ {MIN_STARS}):"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥
@router.message(lambda message: user_data.get(message.from_user.id, {}).get("awaiting_amount") and message.text.isdigit())
async def input_amount_handler(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥.
    """
    amount = int(message.text)

    if amount < MIN_STARS:
        await message.answer(
            f"‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –º–µ–Ω–µ–µ {MIN_STARS} –∑–≤—ë–∑–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."
        )
        return

    price = calculate_price(amount, STAR_COST)
    user_data[message.from_user.id]["amount"] = amount
    user_data[message.from_user.id]["price"] = price
    user_data[message.from_user.id]["awaiting_amount"] = False

    gift_text = (
        f"üéÅ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å *{amount} –∑–≤—ë–∑–¥* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data[message.from_user.id]['recipient']}.\n"
        if user_data[message.from_user.id].get("gift") else
        f"‚≠ê –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ *{amount} –∑–≤—ë–∑–¥*.\n"
    )

    await message.answer(
        f"{gift_text}üí∞ –¶–µ–Ω–∞ –∑–∞ —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{price} —Ä—É–±.*\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã:",
        reply_markup=payment_menu
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@router.callback_query(lambda call: call.data.startswith("pay_"))
async def payment_method_handler(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.
    """
    payment_method = call.data.split("_")[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –∏–∑ callback_data
    await call.message.answer(
        f"üí≥ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method.upper()}.\n\n"
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è!\n\n"
        "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–≤—ë–∑–¥: *15 –º–∏–Ω—É—Ç*.\n\n"
        f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {SUPPORT_CONTACT}"
    )
    await send_order_to_admin(call.from_user)

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def send_order_to_admin(user):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ.
    """
    amount = user_data[user.id]["amount"]
    price = user_data[user.id]["price"]
    recipient = user_data[user.id].get("recipient", "‚Äî")

    await user.bot.send_photo(
        chat_id=ADMIN_CHAT_ID,
        photo=FSInputFile("images/admin_notification.jpg"),
        caption=(
            "üì© *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
            f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è: {recipient}\n"
            f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}\n"
            f"üí∞ –°—É–º–º–∞: {price} —Ä—É–±.\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã–¥–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã. üåü"
        ),
        reply_markup=admin_menu
    )

# –ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑
@router.callback_query(lambda call: call.data == "close_order")
async def close_order(call: CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    await call.message.delete()
    await call.answer("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.", show_alert=False)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def setup_handlers(dp: Dispatcher):
    dp.include_router(router)
